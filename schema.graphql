type DepositAction @entity {
  id: ID!
  address: Bytes!
  amount: BigInt!
  epoch: BigInt!
  timestamp: BigInt!
}

type WithdrawAction @entity {
  id: ID!
  address: Bytes!
  amount: BigInt!
  timestamp: BigInt!
}

type InitiateWithdrawAction @entity {
  id: ID!
  address: Bytes!
  amount: BigInt!
  epoch: BigInt!
  timestamp: BigInt!
}

type LPBalance @entity {
  id: ID!
  balance: BigInt!
}

type RedeemSharesAction @entity {
  id: ID!
  address: Bytes!
  amount: BigInt!
  epoch: BigInt!
  timestamp: BigInt!
}

type OptionsBoughtAction @entity {
  id: ID!
  otoken: OToken
  amount: BigInt!
  premium: BigInt!
  fee: BigInt!
  buyer: Bytes!
  timestamp: BigInt!
  transactionHash: String!
}

type OptionsSoldAction @entity {
  id: ID!
  otoken: OToken
  amount: BigInt!
  premium: BigInt!
  fee: BigInt!
  seller: Bytes!
  timestamp: BigInt!
  transactionHash: String!
}

type OptionsTransferAction @entity {
  id: ID!
  otoken: OToken
  amount: BigInt!
  from: Bytes!
  to: Bytes!
  timestamp: BigInt!
  transactionHash: String!
}

type WriteOptionsAction @entity {
  id: ID!
  otoken: OToken
  amount: BigInt!
  premium: BigInt!
  buyer: Bytes!
  escrow: BigInt!
  timestamp: BigInt!
  transactionHash: String!
}

type BuybackOptionAction @entity {
  id: ID!
  otoken: OToken
  amount: BigInt!
  premium: BigInt!
  seller: Bytes!
  timestamp: BigInt!
  transactionHash: String!
}

type RebalanceDeltaAction @entity {
  id: ID!
  deltaChange: BigInt!
  timestamp: BigInt!
  transactionHash: String!
  reactorIndex: Int
}

# type DailyStatSnapshot @entity {
#   id: ID!
#   timestamp: BigInt!
#   totalReturns: BigInt!
#   totalAssets: BigInt!
#   cumulativeYield: BigDecimal
#   epoch: BigInt
# }

type PricePerShare @entity {
  " Equals to ${epoch}"
  id: ID!
  epoch: BigInt!
  timestamp: BigInt!
  value: BigInt!
  growthSinceFirstEpoch: BigDecimal!
}

# beyond

type Serie @entity {
  id: ID!
  strike: BigInt!
  expiration: BigInt!
  isPut: Boolean!
  isBuyable: Boolean!
  isSellable: Boolean!
  netDHVExposure: BigInt!
}

type Expiry @entity {
  id: ID!
  timestamp: BigInt!
  utc: String!
}

type Collateral @entity {
  " Equals to collateral address"
  id: ID!
  calls: Boolean!
  puts: Boolean!
}

type SABR @entity {
  " Equals to expiry"
  id: ID!
  callAlpha: Int!,
  callBeta: Int!,
  callRho: Int!,
  callVolvol: Int!,
  putAlpha: Int!,
  putBeta: Int!,
  putRho: Int!,
  putVolvol: Int!,
  interestRate: BigInt!
}

# opyn

type Account @entity {
  id: ID!

  "Amount of vaults this account has"
  vaultCount: BigInt!

  "Array of all vaults"
  vaults: [Vault!]! @derivedFrom(field: "owner")

  balances: [AccountBalance!]! @derivedFrom(field: "account")
  positions: [Position!]! @derivedFrom(field: "account")
}

type AccountBalance @entity {
  " Equals to ${account}-${otoken}"
  id: ID!
  account: Account!
  token: OToken!
  balance: BigInt!
}

type Controller @entity {
  id: ID!
  addressBook: Bytes!
  partialPauser: Bytes!
  fullPauser: Bytes!
  owner: Bytes!
  systemPartiallyPaused: Boolean!
  systemFullyPaused: Boolean!
  callRestricted: Boolean!
}

type ERC20 @entity {
  id: ID!
  symbol: String!
  name: String!
  decimals: Int!
}

type OToken @entity {
  id: ID!

  # implementation address
  implementation: Bytes!

  name: String!
  symbol: String!
  decimals: Int!
  strikeAsset: ERC20!
  underlyingAsset: ERC20!
  collateralAsset: ERC20!
  creator: Bytes!
  strikePrice: BigInt!
  expiryTimestamp: BigInt!
  isPut: Boolean!

  createdAt: BigInt!
  createdTx: Bytes!

  totalSupply: BigInt!
}

type Position @entity {
  "Equals to <account>-<oToken>-<id>"
  id: ID!

  "holder redeem actions (payout)"
  redeemActions: [RedeemAction!]!

  account: Account!
  oToken: OToken!
  netAmount: BigInt!
  longAmount: BigInt!
  shortAmount: BigInt!
  # writeOptionsTransactions: [WriteOptionsAction!]!
  # Transactions with Rysk Option Exchange
  optionsBoughtTransactions: [OptionsBoughtAction!]!
  optionsSoldTransactions: [OptionsSoldAction!]!
  # Transfers between users
  optionsTransferTransactions: [OptionsTransferAction!]!

  "vault settle actions (payout)"
  settleActions: [SettleAction!]!


  "Wheather this is an active or closed position."
  active: Boolean!
}

type Vault @entity {
  "Equals to <owner>-<vaultId>"
  id: ID!
  type: BigInt

  owner: Account!
  vaultId: BigInt!

  shortOToken: OToken
  longOToken: OToken
  collateralAsset: ERC20
  shortAmount: BigInt
  longAmount: BigInt
  collateralAmount: BigInt

  " The first time this vault creates short position. Got reset after settleing and redeeming."
  firstMintTimestamp: BigInt!
}

interface VaultAction {
  " Equals to: <actionType>-<transactionHash>-<logId>"
  id: ID!
  " Transaction sender, either account or operator"
  messageSender: Bytes!
  " The vault that this action operates on"
  vault: Vault!
  " Block number "
  block: BigInt!
  " Transaction hash (tx) "
  transactionHash: Bytes!
  " Timestamp as seconds (time) "
  timestamp: BigInt!
}

type MintShortAction implements VaultAction @entity {
  # Vault fields
  id: ID!
  messageSender: Bytes!
  vault: Vault!
  block: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!

  " Create oToken to"
  to: Bytes!
  " OToken asset"
  oToken: OToken!
  " Amount added in the vault"
  amount: BigInt!
}

type RedeemAction @entity {
  "REDEEM-TxHash-logIndex"
  id: ID!

  block: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!

  "the account that call _redeem"
  messageSender: Bytes!

  "the otoken to redeem"
  oToken: OToken!

  "amount of oToken burned"
  otokenBurned: BigInt!

  "the asset that payout was denominated in. (Should be the collateral of the token)"
  payoutAsset: ERC20!

  payoutAmount: BigInt!

  "the payout goes to"
  receiver: Bytes!

}



type WhitelistedProduct @entity {
  id: ID!
  underlying: ERC20!
  strike: ERC20!
  collateral: ERC20!
  isPut: Boolean!
  isWhitelisted: Boolean!
}

type SettleAction implements VaultAction @entity {
  # Vault fields
  id: ID!
  messageSender: Bytes!
  vault: Vault!
  block: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!

  "the asset that payout was denominated in. (Should be the collateral of the token)"
  collateral: ERC20

  "original collateral in the vault"
  collateralAmount: BigInt

  " Payout to to"
  to: Bytes!

  "long oToken"
  long: OToken

  longAmount: BigInt

  "short oToken"
  short: OToken

  shortAmount: BigInt

  " Amount payout"
  amount: BigInt!
}